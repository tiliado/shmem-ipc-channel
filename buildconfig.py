#!/usr/bin/env python3.6
import functools as _functools
import shlex as _shlex
import subprocess as _subprocess
import argparse as _argparse
import re as _re
import typing as _type

import sys

PROJECT = ("unknown", "0.0.0")
CFLAGS = []
LDFLAGS = []
VALAFLAGS = []
VARIABLES = []
TARGET_ALL = []
TARGET_INSTALL = []
OPTIONS = None
_arg_parser = _argparse.ArgumentParser()
_expand_re = _re.compile(r"\$\((\w+)\)")


def _expand_option(value: _type.Any):
    if not isinstance(value, str):
        return value

    new_value, old_value = value, None
    while new_value != old_value:
        old_value, new_value = new_value, _expand_re.sub(lambda m: getattr(OPTIONS, m.group(1)), new_value)
    return new_value


def build(*targets):
    TARGET_ALL.extend(targets)


def install(*targets):
    TARGET_INSTALL.extend((s if s.startswith("install-") else "install-" + s) for s in targets)


def getarg(name, default=None):
    global OPTIONS
    if OPTIONS is None:
        OPTIONS = _arg_parser.parse_args()
    return getattr(OPTIONS, name, default)


def arg(name, default, label, defvar=True, **kwargs):
    dest = name = name.replace("-", "_")
    label += " [%s]" % default
    if default is True or default is False:
        flag = name.replace("_", "-")
        for name, action in (("--enable-" + flag, "store_true"), ("--disable-" + flag, "store_false")):
            _arg_parser.add_argument(name, action=action, default=default, help=label, dest=dest, **kwargs)
    else:
        _arg_parser.add_argument("--%s" % name.replace("_", "-"), default=default, help=label, dest=dest, **kwargs)
    resolve = _functools.partial(getarg, dest)
    if defvar:
        VARIABLES.append(lambda: "%s := %s\n" % (dest.upper(), resolve()))
    return resolve


def cflags(flags):
    CFLAGS.append(flags)


def ldflags(flags):
    LDFLAGS.append(flags)


def valaflags(flags):
    VALAFLAGS.append(flags)


def stdout(*args) -> str:
    return _subprocess.run(*args, stdout=_subprocess.PIPE, check=True).stdout.decode("utf-8")


def pkg_version(mod: str, parts: int = 0) -> str:
    version = stdout(["pkg-config", "--modversion", mod]).strip()
    return ".".join(version.split(".")[0:parts]) if parts else version


def pkg(mod: str):
    for mod in mod.split():
        CFLAGS.append(stdout(["pkg-config", "--cflags", mod]).strip())
        LDFLAGS.append(stdout(["pkg-config", "--libs", mod]).strip())


def var(definition, *args):
    if args:
        definition = definition % args
    VARIABLES.append(definition + "\n")


def project(name, version):
    global PROJECT
    var("PROJECT := %s", name)
    var("VERSION := %s", version)
    _arg_parser.description = "Configure %s %s project. You can use GNU Make $(VARIABLES)." % (name, version)
    PROJECT = name, version
    return PROJECT


def extract_include_dirs():
    return [flag[2:] for flag in _shlex.split(" ".join(CFLAGS)) if flag.startswith("-I")]


def finish():
    with open("config.mk", "wt") as f:
        f.write("# *** config.mk *** Autogenerated *** Do not modify ***\n")
        f.write("# Run `./configure --help` and then `./configure ...` to reconfigure.\n")
        f.write("# Options: %s\n\n" % (" ".join(_shlex.quote(s) for s in sys.argv[1:]) if sys.argv[1:] else None))
        var("CFLAGS := %s $(CFLAGS)", " ".join(CFLAGS))
        var("LDFLAGS := %s $(LDFLAGS)", " ".join(LDFLAGS))
        var("VALAFLAGS := %s $(addprefix -X , $(CFLAGS) $(LDFLAGS)) $(VALAFLAGS)", " ".join(VALAFLAGS))
        f.write("".join((v if isinstance(v, str) else v()) for v in VARIABLES))
        f.write("\nall: %s\n" % " ".join(TARGET_ALL))
        f.write("\ninstall: %s\n" % " ".join(TARGET_INSTALL))

    with open("config.mk") as f:
        print(f.read())

    print("# *** EOF *** config.mk ***\n")
    print("Configuration of %s %s finished." % PROJECT)
    print("Run `make all` and then `make install` or `make DESTDIR=/whatewer install` as root.")
